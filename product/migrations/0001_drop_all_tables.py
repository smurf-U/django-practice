# Generated by Django 2.2.3 on 2019-09-05 14:06

from django.db import migrations, models
import django.db.models.deletion
import product.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('type', models.CharField(choices=[('select', 'Select'), ('radio', 'Radio'), ('color', 'Color')], default='select', max_length=32, verbose_name='Type')),
                ('create_variant', models.CharField(choices=[('no_variant', 'Never'), ('always', 'Always'), ('dynamic', 'Only when the product is added to a sales order')], default='always', max_length=32, verbose_name='Create Variants')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='product.AttributeCategory', verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Value')),
                ('is_custom', models.BooleanField(help_text='Allow users to input custom values for this attribute value', verbose_name='Is custom value')),
                ('html_color', models.CharField(help_text="Here you can set a\n                specific HTML color index (e.g. #ff0000) to display the color if the\n                attribute type is 'Color'.", max_length=64, verbose_name='HTML Color Index')),
                ('sequence', models.IntegerField(default='0', help_text='Determine the display order', verbose_name='Sequence')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='value_ids', to='product.Attributes', verbose_name='Attribute')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='product_category')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_ids', to='product.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('sku', models.CharField(max_length=64, verbose_name='SKU')),
                ('image', models.ImageField(blank=True, upload_to='product_template', verbose_name='Image')),
                ('description', models.TextField(blank=True, verbose_name='Product Description')),
                ('description_purchase', models.TextField(blank=True, verbose_name='Purchase Description')),
                ('description_sale', models.TextField(blank=True, help_text='A description of the Product that you want to communicate to your customers. This description will be copied to every Sales Order, Delivery Order and Customer Invoice/Credit Note', verbose_name='Sale Description')),
                ('type', models.CharField(choices=[('product', 'Storable'), ('consu', 'Consumable'), ('service', 'Service')], default='consu', help_text='A storable product is a  product for which you manage stock. The Inventory app has to be installed.\nA consumable product is a product for which stock is not managed.\nA service is a non-material product you provide.', max_length=32, verbose_name='Type')),
                ('rental', models.BooleanField(verbose_name='Can be Rent')),
                ('sale_ok', models.BooleanField(default=True, verbose_name='Can be Sold')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('price', models.FloatField(default=1.0, verbose_name='Price')),
                ('categ', models.ForeignKey(blank=True, default=product.models.get_category, help_text='Select category for the current product', null=True, on_delete=django.db.models.deletion.SET_NULL, to='product.Category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Product',
            },
        ),
        migrations.CreateModel(
            name='AttributeValueLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.Attributes', verbose_name='Attribute')),
                ('product_tmpl', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_line_ids', to='product.Template', verbose_name='Product Template')),
                ('values', models.ManyToManyField(to='product.AttributeValue', verbose_name='Values')),
            ],
        ),
        migrations.AddIndex(
            model_name='template',
            index=models.Index(fields=['name'], name='product_tem_name_d13566_idx'),
        ),
        migrations.AddIndex(
            model_name='attributevalueline',
            index=models.Index(fields=['product_tmpl'], name='product_tmpl_idx'),
        ),
        migrations.AddIndex(
            model_name='attributevalueline',
            index=models.Index(fields=['attribute'], name='attribute_idx'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['attribute'], name='attribute_id_name_idx'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['sequence'], name='sequence_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attributevalue',
            unique_together={('name', 'attribute')},
        ),
    ]
